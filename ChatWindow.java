import java.awt.Color;
import java.awt.event.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import javax.swing.text.*;

import javax.swing.*;
/**
 *
 * @author rosh
 */
public class ChatWindow extends JFrame  implements Runnable{

    /**
     * Creates new form NewJFrame
     */
	//private String strServer ="localhost";
	private String strServer ="10.98.219.182";
	private int iPort = 2020;
    public StringBuffer sb = new StringBuffer();
    public ArrayList<String> arrListUserNames =new ArrayList<String>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButtonClear;
    private JButton jButtonConnect;
    private JButton jButtonDisconnect;
    private JButton jButtonRemove;
    private JButton jButtonSend;
    private JList jListUsers;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JTextArea jTextAreaChat;
    private JTextField jTextFieldChat;
    private JTextField jTextUserName;
    private JLabel jLabelUserName;
    private javax.swing.JLabel jLabelUserList;
    private DrawPanel drawPanel1;
    private JTextPane jtextPane ;
    boolean bIsConnected ;
    public ChatClient objChatClient;
    private MutableAttributeSet mAttrs;
    private StyledDocument styleDoc ;
    private SimpleAttributeSet keyWord;
    private Socket socket              = null;
    MessageObject objDataObject;
    ObjectInputStream objInputStream;
    ObjectOutputStream objOutputStream;
    DefaultListModel listModel;
    public int[][] arrChatMsgCount = new int[100][4]; 
    private int iColorCounter,iChatStart = 0;
    public String strCurrentUser = "";
    // End of variables declaration//GEN-END:variables
    public ChatWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

    	
    	listModel = new DefaultListModel();
    	jPanel1 = new javax.swing.JPanel();
        jTextFieldChat = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaChat = new javax.swing.JTextArea();
        jButtonSend = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        //jListUsers = new javax.swing.JList();
        jButtonRemove = new javax.swing.JButton();
        jButtonConnect = new javax.swing.JButton();
        jButtonDisconnect = new javax.swing.JButton();
        jTextUserName = new javax.swing.JTextField();
        jLabelUserName = new javax.swing.JLabel();
        drawPanel1 = new DrawPanel();
        jLabelUserList = new javax.swing.JLabel();
        jButtonConnect.setEnabled(false);
        jtextPane = new JTextPane();
        jtextPane.setEditable(false);
        mAttrs = jtextPane.getInputAttributes();  
        styleDoc = jtextPane.getStyledDocument();      
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat Window");
        
        SimpleAttributeSet keyWord = new SimpleAttributeSet();
        StyleConstants.setForeground(keyWord, Color.RED);
        StyleConstants.setBackground(keyWord, Color.YELLOW);
        
        jTextFieldChat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldChatKeyPressed(evt);
            }
        });

        //editorPane.setColumns(20);
       // editorPane.setRows(5);
        jScrollPane1.setViewportView(jtextPane);

        jButtonSend.setText("Send");
        jButtonSend.setActionCommand("btnSend");
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

       /* jListUsers.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Rob", "Bob", "Jobs", "Steve", "Matt" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListUsersMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jListUsers);*/

        jButtonRemove.setText("Remove");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });
        jTextUserName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextUserNameKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextFieldChat, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSend)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonClear)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonRemove)
                        .addGap(431, 431, 431))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(drawPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(drawPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldChat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSend)
                    .addComponent(jButtonClear)
                    .addComponent(jButtonRemove)))
        );

        jButtonConnect.setText("Connect");
        jButtonConnect.setToolTipText("");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jButtonDisconnect.setText("Disconnect");
        jButtonDisconnect.setActionCommand("jButtonDisconnect");
        jButtonDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisconnectActionPerformed(evt);
            }
        });

        jLabelUserName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelUserName.setText("Enter User Name");

        jLabelUserList.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelUserList.setText("UserList");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonConnect)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDisconnect)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabelUserName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelUserList)
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelUserName))
                    .addComponent(jLabelUserList, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDisconnect)
                    .addComponent(jButtonConnect)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSendActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed

        
        String strMessage,strUserName = "";
    	if(isConnected()){
    	if(!jTextFieldChat.getText().trim().equals("")){
    		strUserName = jTextUserName.getText();
    		
    		if(sb.indexOf(strUserName) == -1){
    			sb.append(strUserName+" :>");
    		}
    		strMessage = strUserName+" :>" +jTextFieldChat.getText();
    		sb.append(strMessage + "\n" );
    		setChatMsgLimits(0,sb);
    		
    		setChatMsgLimits(0,sb);
    		 
    		setChatArea(arrChatMsgCount);
    		objDataObject = new MessageObject();
			objDataObject.setMessage(strMessage);
			objDataObject.setStrUserName(strUserName);
			objDataObject.setbActiveUser(true);
            sendMessage(objDataObject);
	        jTextFieldChat.setText("");
    		}
    	}
    }//GEN-LAST:event_jButtonSendActionPerformed
    public void setChatMsgLimits(int iSource,StringBuffer sbTemp){
    
    	arrChatMsgCount[iColorCounter][0] = iSource;
		arrChatMsgCount[iColorCounter][1] = iChatStart;
		arrChatMsgCount[iColorCounter][2] = sbTemp.length()-iChatStart;
		arrChatMsgCount[iColorCounter][3] = sbTemp.length();
		iChatStart = arrChatMsgCount[iColorCounter][1] + arrChatMsgCount[iColorCounter][2];
		iColorCounter++;
    }
    public void setChatArea(int [][] arr){
    	
    	int iSource, istart,iEnd;
		for(int i=0 ;i<iColorCounter; i++ ){
				iSource = arr[i][0];
				if(iSource ==0){
				   StyleConstants.setForeground(mAttrs, Color.red); 
			       styleDoc.setCharacterAttributes(arr[i][1], arr[i][3], mAttrs, false); 
	        		
				}else{
					StyleConstants.setForeground(mAttrs, Color.green); 
				     styleDoc.setCharacterAttributes(arr[i][1], arr[i][3], mAttrs, false); 
				
				}
		}
		jtextPane.setText( sb.toString());
    }
    private void jButtonConnectActionPerformed(ActionEvent evt) {
    	String strUserName,strMessage = "";
    	//listModel.addElement("");
    	strUserName = jTextUserName.getText();
    		strUserName = jTextUserName.getText();
        	if(!strUserName.equals("")){
        		if(!arrListUserNames.contains(strUserName))
        		{
        			arrListUserNames.add(strUserName);
        		}
        		jButtonConnect.setEnabled(true);
        		jTextUserName.setEditable(false);
        		jListUsers = new JList(listModel);
        		listModel.addElement(strUserName);
        		jScrollPane2.setViewportView(jListUsers);
        		connect(strUserName);
        		strMessage = "**User "+strUserName+" joined ";
        		sb.append(strMessage + "\n" );
        		setChatMsgLimits(0,sb);
 
        		setChatArea(arrChatMsgCount);
        		objDataObject = new MessageObject();
				objDataObject.setMessage(strMessage);
				objDataObject.setStrUserName(strUserName);
				objDataObject.setbActiveUser(true);
                sendMessage(objDataObject);
        		jButtonConnect.setEnabled(false);
        		strCurrentUser = strUserName; 
        	}else{
        		jButtonConnect.setEnabled(false);
        		System.out.println("User Name is empty, Cannot connect.");
        	}
    	
    }
    private void jButtonDisconnectActionPerformed(ActionEvent evt) {
    	int ch = JOptionPane.showConfirmDialog (null, "Confirm", "Disconnect", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
    	String strMessage,strUserName="";
    	if(ch == JOptionPane.OK_OPTION)
    	{    		
    		System.out.println("Closed the connection");
    		strUserName = jTextUserName.getText();
    		strMessage = "**User "+strUserName+" left ";
    		sb.append(strMessage + "\n" );
    		setChatMsgLimits(0,sb);
    		 
    		setChatArea(arrChatMsgCount);
    		setConnected(false);
    		jButtonRemoveActionPerformed(evt);
    		objDataObject = new MessageObject();
    		objDataObject.setMessage(strMessage);
    		objDataObject.setStrUserName(strUserName);
    		objDataObject.setbActiveUser(false);
            sendMessage(objDataObject);
            maintainUserList(objDataObject);
    		disconnect();
    		jButtonConnect.setEnabled(true);
    		
    	}
    	else if    	(ch == JOptionPane.CANCEL_OPTION)
    	{
    		System.out.println("Still Connected");
    	}  
    }
    public void disconnect(){
    	System.out.println("Disconnecting the connection to server.");
    	try{
    	if(socket !=null){socket.close(); }
    	if(objInputStream !=null){objInputStream.close(); }
    	if(objOutputStream !=null){objOutputStream.close(); }	
    	}catch(Exception ex){
    		System.out.println("Exception: method :disconnect() " + ex.getMessage());
    	}
    }
    public void connect(String strUsername){
		setConnected(true);
		
		System.out.println("Connecting to Server:" + strServer+", Port:"+ iPort +", User:" + strUsername );
		try{
			socket = new Socket(strServer, iPort);
			objOutputStream = new ObjectOutputStream(socket.getOutputStream());
			
			new Thread(this).start();
		}catch(IOException e){
			System.out.println(e.getMessage());
		}	
	}
        public void run(){
		try{
			objInputStream = new ObjectInputStream(socket.getInputStream());
			while(true){
				MessageObject objMessageObject =(MessageObject) objInputStream.readObject();
				if(objMessageObject != null){
					String strmessage = objMessageObject.getMessage();
					System.out.println("In client :strmessage-> " + objMessageObject);
					if(!objMessageObject.getStrUserName().equals(strCurrentUser)){
						
						sb.append(strmessage + "\n" );
						int ilength= (strmessage + "\n").toString().length();
		        		setChatMsgLimits(0,sb);
		        		 
		        		setChatArea(arrChatMsgCount); 
					}
					maintainUserList(objMessageObject);
				}
			}
		
		}catch(Exception e){
			System.out.println("Exception: " + e.getMessage());
		}finally{
			try{
				objInputStream.close();
			}catch(IOException e){
				System.out.println(e.getMessage());
			}
		}
	}
    public void maintainUserList(Object obj){

    	MessageObject objMessageObject = (MessageObject) obj;
    	boolean bUserExists =false; int iIdex=0;
    		for (int i =0 ;i <listModel.size(); i++){
	    			if(listModel.getElementAt(i).toString().equals(objMessageObject.getStrUserName()) ){
	    				bUserExists =true;
	    				iIdex= i;
	    				break;
    			}
    		}
    		if(!bUserExists && objMessageObject.isbActiveUser()){
    			listModel.addElement(objMessageObject.getStrUserName());
         		jScrollPane2.setViewportView(jListUsers);
    		}
    		if(bUserExists && !objMessageObject.isbActiveUser()){
    			listModel.remove(iIdex);
         		jScrollPane2.setViewportView(jListUsers);
    		}
    
    }
	public void setConnected(boolean c){
		bIsConnected = c;
	}
	public boolean isConnected(){
		return bIsConnected;
	}
	public void sendMessage(Object obj){
	
		try{
		objOutputStream.writeObject(obj);
                System.out.println("obj->"+obj);
		}catch(Exception ex){
			ex.printStackTrace();
			System.out.println("Exception in Method SendMessage->"+ex.toString());
		
		}
	}
	
    private void jButtonClearActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:
        jtextPane.setText( "");
        sb.delete(0, sb.length());
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonRemoveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        // TODO add your handling code here:
        
        try{
        int i = jListUsers.getSelectedIndex();
        if(i>0){
            //jListUsers.remove(i);
            listModel.remove(i);
    		jScrollPane2.setViewportView(jListUsers);
            }
        }catch (Exception ex){
               System.out.println( ex.toString());
        }
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jListUsersMouseClicked1(MouseEvent evt) {//GEN-FIRST:event_jListUsersMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jListUsersMouseClicked

    private void jTextUserNameKeyTyped(java.awt.event.KeyEvent evt) {                                       
        // TODO add your handling code here:
          jButtonConnect.setEnabled(true);
     }
    private void jTextFieldChatKeyPressed(KeyEvent evt) {//GEN-FIRST:event_jTextFieldChatKeyPressed
        // TODO add your handling code here:
        int key=evt.getKeyCode();
        if(evt.getSource()== jTextFieldChat)
    {
        if(key==KeyEvent.VK_ENTER)
        {       
                String strMessage,strUserName = "";
        	if(!jTextFieldChat.getText().trim().equals("")){
        		strUserName = jTextUserName.getText();
        		
        		if(sb.indexOf(strUserName) == -1){
        			sb.append(strUserName+" :>");
        		}
        		strMessage = strUserName+" :>" +jTextFieldChat.getText();
        		sb.append(strMessage + "\n" );
        		setChatMsgLimits(0,sb);
        		 
        		setChatArea(arrChatMsgCount);
        		System.out.println("sb.toString()->"+sb.toString());
        		objDataObject = new MessageObject();
				objDataObject.setMessage(strMessage);
				objDataObject.setStrUserName(strUserName);
				objDataObject.setbActiveUser(true);
               sendMessage(objDataObject);
    	       jTextFieldChat.setText("");
        		}
        	}
        }
    }
    //GEN-LAST:event_jTextFieldChatKeyPressed
                   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatWindow().setVisible(true);
            }
        });
    }




}
